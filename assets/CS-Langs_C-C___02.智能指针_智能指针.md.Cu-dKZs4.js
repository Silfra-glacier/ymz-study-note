import{_ as d,c as r,o as e,ag as o}from"./chunks/framework.Cizge8DQ.js";const l=JSON.parse('{"title":"智能指针","description":"","frontmatter":{},"headers":[],"relativePath":"CS-Langs/C-C++/02.智能指针/智能指针.md","filePath":"CS-Langs/C-C++/02.智能指针/智能指针.md","lastUpdated":null}'),s={name:"CS-Langs/C-C++/02.智能指针/智能指针.md"};function n(a,t,c,g,_,h){return e(),r("div",null,t[0]||(t[0]=[o('<h1 id="智能指针" tabindex="-1">智能指针 <a class="header-anchor" href="#智能指针" aria-label="Permalink to &quot;智能指针&quot;">​</a></h1><p><strong>智能指针是 C++ 提供的一种自动管理资源的工具</strong>，它封装了普通指针，并提供了<strong>自动释放</strong>和<strong>防止资源泄漏</strong>的能力。</p><p>智能指针和普通指针的对比：</p><table tabindex="0"><thead><tr><th>特性</th><th><strong>普通指针 (<code>int*</code>)</strong></th><th><strong>智能指针 (<code>unique_ptr</code>, <code>shared_ptr</code>)</strong></th></tr></thead><tbody><tr><td><strong>内存管理</strong></td><td>需要手动 <code>new</code> 和 <code>delete</code></td><td>自动管理，作用域结束时自动释放</td></tr><tr><td><strong>安全性</strong></td><td>容易发生内存泄漏、悬空指针</td><td>防止内存泄漏、避免双重释放</td></tr><tr><td><strong>拷贝</strong></td><td>可以随意拷贝指针</td><td><code>unique_ptr</code> 不能拷贝，<code>shared_ptr</code> 使用引用计数</td></tr><tr><td><strong>性能</strong></td><td>没有额外的管理开销</td><td><code>shared_ptr</code> 维护引用计数有额外开销</td></tr><tr><td><strong>适用场景</strong></td><td>适用于简单、短生命周期的资源</td><td>适用于自动管理资源、避免泄漏</td></tr></tbody></table><p>智能指针的主要类型有 3 种：</p><table tabindex="0"><thead><tr><th>智能指针</th><th>作用</th><th>主要功能</th></tr></thead><tbody><tr><td><code>std::unique_ptr&lt;T&gt;</code></td><td><strong>独占所有权</strong></td><td>不能拷贝，只能转移所有权，自动释放</td></tr><tr><td><code>std::shared_ptr&lt;T&gt;</code></td><td><strong>共享所有权</strong></td><td>允许多个 <code>shared_ptr</code> 共享同一个对象，使用<strong>引用计数</strong>管理资源</td></tr><tr><td><code>std::weak_ptr&lt;T&gt;</code></td><td><strong>弱引用，不影响引用计数</strong></td><td>主要用于解决 <code>shared_ptr</code> 的循环引用问题</td></tr></tbody></table>',6)]))}const i=d(s,[["render",n]]);export{l as __pageData,i as default};
